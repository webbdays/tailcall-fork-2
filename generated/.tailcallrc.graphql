"""
The @addField operator simplifies data structures and queries by adding a field that 
inlines or flattens a nested field or node within your schema. more info [here](https://tailcall.run/docs/guides/operators/#addfield)
"""
directive @addField(
  """
  Name of the new field to be added
  """
  name: String!
  """
  Path of the data where the field should point to
  """
  path: [String!]
) repeatable on OBJECT

"""
The @alias directive indicates that aliases of one enum value.
"""
directive @alias(
  options: [String!]
) on ENUM_VALUE

"""
The @cache operator enables caching for the query, field or type it is applied to.
"""
directive @cache(
  """
  Specifies the duration, in milliseconds, of how long the value has to be stored in 
  the cache.
  """
  maxAge: Int!
) on OBJECT | FIELD_DEFINITION

"""
Provides the ability to refer to multiple fields in the Query or Mutation root.
"""
directive @call(
  """
  Steps are composed together to form a call. If you have multiple steps, the output 
  of the previous step is passed as input to the next step.
  """
  steps: [Step]
) on FIELD_DEFINITION

"""
The `@expr` operators allows you to specify an expression that can evaluate to a 
value. The expression can be a static value or built form a Mustache template. schema.
"""
directive @expr(
  body: JSON
) on FIELD_DEFINITION

"""
The @graphQL operator allows to specify GraphQL API server request to fetch data 
from.
"""
directive @graphQL(
  """
  Named arguments for the requested field. More info [here](https://tailcall.run/docs/guides/operators/#args)
  """
  args: [KeyValue]
  """
  This refers to the base URL of the API. If not specified, the default base URL is 
  the one specified in the `@upstream` operator.
  """
  baseURL: String
  """
  If the upstream GraphQL server supports request batching, you can specify the 'batch' 
  argument to batch several requests into a single batch request.Make sure you have 
  also specified batch settings to the `@upstream` and to the `@graphQL` operator.
  """
  batch: Boolean!
  """
  The headers parameter allows you to customize the headers of the GraphQL request 
  made by the `@graphQL` operator. It is used by specifying a key-value map of header 
  names and their values.
  """
  headers: [KeyValue]
  """
  Specifies the root field on the upstream to request data from. This maps a field 
  in your schema to a field in the upstream schema. When a query is received for this 
  field, Tailcall requests data from the corresponding upstream field.
  """
  name: String!
) on FIELD_DEFINITION

"""
The @grpc operator indicates that a field or node is backed by a gRPC API.For instance, 
if you add the @grpc operator to the `users` field of the Query type with a service 
argument of `NewsService` and method argument of `GetAllNews`, it signifies that 
the `users` field is backed by a gRPC API. The `service` argument specifies the name 
of the gRPC service. The `method` argument specifies the name of the gRPC method. 
In this scenario, the GraphQL server will make a gRPC request to the gRPC endpoint 
specified when the `users` field is queried.
"""
directive @grpc(
  """
  This refers to the base URL of the API. If not specified, the default base URL is 
  the one specified in the `@upstream` operator.
  """
  baseURL: String
  """
  The `batchKey` dictates the path Tailcall will follow to group the returned items 
  from the batch request. For more details please refer out [n + 1 guide](https://tailcall.run/docs/guides/n+1#solving-using-batching).
  """
  batchKey: [String!]
  """
  This refers to the arguments of your gRPC call. You can pass it as a static object 
  or use Mustache template for dynamic parameters. These parameters will be added in 
  the body in `protobuf` format.
  """
  body: JSON
  """
  The `headers` parameter allows you to customize the headers of the HTTP request made 
  by the `@grpc` operator. It is used by specifying a key-value map of header names 
  and their values. Note: content-type is automatically set to application/grpc
  """
  headers: [KeyValue]
  """
  This refers to the gRPC method you're going to call. For instance `GetAllNews`.
  """
  method: String!
) on FIELD_DEFINITION

"""
The @http operator indicates that a field or node is backed by a REST API.For instance, 
if you add the @http operator to the `users` field of the Query type with a path 
argument of `"/users"`, it signifies that the `users` field is backed by a REST API. 
The path argument specifies the path of the REST API. In this scenario, the GraphQL 
server will make a GET request to the API endpoint specified when the `users` field 
is queried.
"""
directive @http(
  """
  This refers to the base URL of the API. If not specified, the default base URL is 
  the one specified in the `@upstream` operator.
  """
  baseURL: String
  """
  The `batchKey` dictates the path Tailcall will follow to group the returned items 
  from the batch request. For more details please refer out [n + 1 guide](https://tailcall.run/docs/guides/n+1#solving-using-batching).
  """
  batchKey: [String!]
  """
  The body of the API call. It's used for methods like POST or PUT that send data to 
  the server. You can pass it as a static object or use a Mustache template to substitute 
  variables from the GraphQL variables.
  """
  body: String
  """
  The `encoding` parameter specifies the encoding of the request body. It can be `ApplicationJson` 
  or `ApplicationXWwwFormUrlEncoded`. @default `ApplicationJson`.
  """
  encoding: Encoding
  """
  The `headers` parameter allows you to customize the headers of the HTTP request made 
  by the `@http` operator. It is used by specifying a key-value map of header names 
  and their values.
  """
  headers: [KeyValue]
  """
  Schema of the input of the API call. It is automatically inferred in most cases.
  """
  input: Schema
  """
  This refers to the HTTP method of the API call. Commonly used methods include `GET`, 
  `POST`, `PUT`, `DELETE` etc. @default `GET`.
  """
  method: Method
  """
  onRequest field in @http directive gives the ability to specify the request interception 
  handler.
  """
  onRequest: String
  """
  Schema of the output of the API call. It is automatically inferred in most cases.
  """
  output: Schema
  """
  This refers to the API endpoint you're going to call. For instance `https://jsonplaceholder.typicode.com/users`.For 
  dynamic segments in your API endpoint, use Mustache templates for variable substitution. 
  For instance, to fetch a specific user, use `/users/{{args.id}}`.
  """
  path: String!
  """
  This represents the query parameters of your API call. You can pass it as a static 
  object or use Mustache template for dynamic parameters. These parameters will be 
  added to the URL. NOTE: Query parameter order is critical for batching in Tailcall. 
  The first parameter referencing a field in the current value using mustache syntax 
  is automatically selected as the batching parameter.
  """
  query: [KeyValue]
) on FIELD_DEFINITION

directive @js(
  name: String!
) on FIELD_DEFINITION

"""
The @link directive allows you to import external resources, such as configuration 
– which will be merged into the config importing it –, or a .proto file – which
 will be later used by `@grpc` directive –.
"""
directive @link(
  """
  The id of the link. It is used to reference the link in the schema.
  """
  id: String
  """
  The source of the link. It can be a URL or a path to a file. If a path is provided, 
  it is relative to the file that imports the link.
  """
  src: String!
  """
  The type of the link. It can be `Config`, or `Protobuf`.
  """
  type: LinkType
) repeatable on SCHEMA

directive @modify(
  name: String
  omit: Boolean
) on FIELD_DEFINITION

"""
Used to omit a field from public consumption.
"""
directive @omit on FIELD_DEFINITION

directive @protected on OBJECT | FIELD_DEFINITION

"""
The `@server` directive, when applied at the schema level, offers a comprehensive 
set of server configurations. It dictates how the server behaves and helps tune tailcall 
for various use-cases.
"""
directive @server(
  """
  `apolloTracing` exposes GraphQL query performance data, including execution time 
  of queries and individual resolvers.
  """
  apolloTracing: Boolean
  """
  `batchRequests` combines multiple requests into one, improving performance but potentially 
  introducing latency and complicating debugging. Use judiciously. @default `false`.
  """
  batchRequests: Boolean
  """
  Enables deduplication of IO operations to enhance performance.This flag prevents 
  duplicate IO requests from being executed concurrently, reducing resource load. Caution: 
  May lead to issues with APIs that expect unique results for identical inputs, such 
  as nonce-based APIs.
  """
  dedupe: Boolean
  enableJIT: Boolean
  """
  `globalResponseTimeout` sets the maximum query duration before termination, acting 
  as a safeguard against long-running queries.
  """
  globalResponseTimeout: Int
  """
  `headers` contains key-value pairs that are included as default headers in server 
  responses, allowing for consistent header management across all responses.
  """
  headers: Headers
  """
  `hostname` sets the server hostname.
  """
  hostname: String
  """
  `introspection` allows clients to fetch schema information directly, aiding tools 
  and applications in understanding available types, fields, and operations. @default 
  `true`.
  """
  introspection: Boolean
  """
  `pipelineFlush` allows to control flushing behavior of the server pipeline.
  """
  pipelineFlush: Boolean
  """
  `port` sets the Tailcall running port. @default `8000`.
  """
  port: Int
  """
  `queryValidation` checks incoming GraphQL queries against the schema, preventing 
  errors from invalid queries. Can be disabled for performance. @default `false`.
  """
  queryValidation: Boolean
  """
  `responseValidation` Tailcall automatically validates responses from upstream services 
  using inferred schema. @default `false`.
  """
  responseValidation: Boolean
  """
  A link to an external JS file that listens on every HTTP request response event.
  """
  script: ScriptOptions
  """
  `showcase` enables the /showcase/graphql endpoint.
  """
  showcase: Boolean
  """
  This configuration defines local variables for server operations. Useful for storing 
  constant configurations, secrets, or shared information.
  """
  vars: [KeyValue]
  """
  `version` sets the HTTP version for the server. Options are `HTTP1` and `HTTP2`. 
  @default `HTTP1`.
  """
  version: HttpVersion
  """
  `workers` sets the number of worker threads. @default the number of system cores.
  """
  workers: Int
) on SCHEMA

"""
Used to represent an identifier for a type. Typically used via only by the configuration 
generators to provide additional information about the type.
"""
directive @tag(
  """
  A unique identifier for the type.
  """
  id: String!
) on OBJECT

"""
The @telemetry directive facilitates seamless integration with OpenTelemetry, enhancing 
the observability of your GraphQL services powered by Tailcall.  By leveraging this 
directive, developers gain access to valuable insights into the performance and behavior 
of their applications.
"""
directive @telemetry(
  export: TelemetryExporter
  """
  The list of headers that will be sent as additional attributes to telemetry exporters 
  Be careful about **leaking sensitive information** from requests when enabling the 
  headers that may contain sensitive data
  """
  requestHeaders: [String!]
) on SCHEMA

"""
The `upstream` directive allows you to control various aspects of the upstream server 
connection. This includes settings like connection timeouts, keep-alive intervals, 
and more. If not specified, default values are used.
"""
directive @upstream(
  """
  `allowedHeaders` defines the HTTP headers allowed to be forwarded to upstream services. 
  If not set, no headers are forwarded, enhancing security but possibly limiting data 
  flow.
  """
  allowedHeaders: [String!]
  """
  This refers to the default base URL for your APIs. If it's not explicitly mentioned 
  in the `@upstream` operator, then each [@http](#http) operator must specify its own 
  `baseURL`. If neither `@upstream` nor [@http](#http) provides a `baseURL`, it results 
  in a compilation error.
  """
  baseURL: String
  """
  An object that specifies the batch settings, including `maxSize` (the maximum size 
  of the batch), `delay` (the delay in milliseconds between each batch), and `headers` 
  (an array of HTTP headers to be included in the batch).
  """
  batch: Batch
  """
  The time in seconds that the connection will wait for a response before timing out.
  """
  connectTimeout: Int
  """
  The `http2Only` setting allows you to specify whether the client should always issue 
  HTTP2 requests, without checking if the server supports it or not. By default it 
  is set to `false` for all HTTP requests made by the server, but is automatically 
  set to true for GRPC.
  """
  http2Only: Boolean
  """
  Providing httpCache size enables Tailcall's HTTP caching, adhering to the [HTTP Caching 
  RFC](https://tools.ietf.org/html/rfc7234), to enhance performance by minimizing redundant 
  data fetches. Defaults to `0` if unspecified.
  """
  httpCache: Int
  """
  The time in seconds between each keep-alive message sent to maintain the connection.
  """
  keepAliveInterval: Int
  """
  The time in seconds that the connection will wait for a keep-alive message before 
  closing.
  """
  keepAliveTimeout: Int
  """
  A boolean value that determines whether keep-alive messages should be sent while 
  the connection is idle.
  """
  keepAliveWhileIdle: Boolean
  """
  onRequest field gives the ability to specify the global request interception handler.
  """
  onRequest: String
  """
  The time in seconds that the connection pool will wait before closing idle connections.
  """
  poolIdleTimeout: Int
  """
  The maximum number of idle connections that will be maintained per host.
  """
  poolMaxIdlePerHost: Int
  """
  The `proxy` setting defines an intermediary server through which the upstream requests 
  will be routed before reaching their intended endpoint. By specifying a proxy URL, 
  you introduce an additional layer, enabling custom routing and security policies.
  """
  proxy: Proxy
  """
  The time in seconds between each TCP keep-alive message sent to maintain the connection.
  """
  tcpKeepAlive: Int
  """
  The maximum time in seconds that the connection will wait for a response.
  """
  timeout: Int
  """
  The User-Agent header value to be used in HTTP requests. @default `Tailcall/1.0`
  """
  userAgent: String
) on SCHEMA

"""
Field whose value is a sequence of bytes.
"""
scalar Bytes

"""
Field whose value conforms to the standard date format as specified in RFC 3339 (https://datatracker.ietf.org/doc/html/rfc3339).
"""
scalar Date

"""
Field whose value conforms to the standard internet email address format as specified 
in HTML Spec: https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address.
"""
scalar Email

"""
Empty scalar type represents an empty value.
"""
scalar Empty

"""
Field whose value is a 128-bit signed integer.
"""
scalar Int128

"""
Field whose value is a 16-bit signed integer.
"""
scalar Int16

"""
Field whose value is a 32-bit signed integer.
"""
scalar Int32

"""
Field whose value is a 64-bit signed integer.
"""
scalar Int64

"""
Field whose value is an 8-bit signed integer.
"""
scalar Int8

"""
Field whose value conforms to the standard JSON format as specified in RFC 8259 (https://datatracker.ietf.org/doc/html/rfc8259).
"""
scalar JSON

"""
Field whose value conforms to the standard E.164 format as specified in E.164 specification 
(https://en.wikipedia.org/wiki/E.164).
"""
scalar PhoneNumber

"""
Field whose value is a 128-bit unsigned integer.
"""
scalar UInt128

"""
Field whose value is a 16-bit unsigned integer.
"""
scalar UInt16

"""
Field whose value is a 32-bit unsigned integer.
"""
scalar UInt32

"""
Field whose value is a 64-bit unsigned integer.
"""
scalar UInt64

"""
Field whose value is an 8-bit unsigned integer.
"""
scalar UInt8

"""
Field whose value conforms to the standard URL format as specified in RFC 3986 (https://datatracker.ietf.org/doc/html/rfc3986).
"""
scalar Url

"""
Provides the ability to refer to a field defined in the root Query or Mutation.
"""
input Step {
  """
  The arguments that will override the actual arguments of the field.
  """
  args: JSON
  """
  The name of the field on the `Mutation` type that you want to call.
  """
  mutation: String
  """
  The name of the field on the `Query` type that you want to call.
  """
  query: String
}

input KeyValue {
  key: String!
  value: String!
}

input Schema {
  Obj: JSON
  Arr: Schema
  Opt: Schema
  Enum: [String!]
}

"""
Type to configure Cross-Origin Resource Sharing (CORS) for a server.
"""
input Cors {
  """
  Indicates whether the server allows credentials (e.g., cookies, authorization headers) 
  to be sent in cross-origin requests.
  """
  allowCredentials: Boolean
  """
  A list of allowed headers in cross-origin requests. This can be used to specify custom 
  headers that are allowed to be included in cross-origin requests.
  """
  allowHeaders: [String!]
  """
  A list of allowed HTTP methods in cross-origin requests. These methods specify the 
  actions that are permitted in cross-origin requests.
  """
  allowMethods: [Method]
  """
  A list of origins that are allowed to access the server's resources in cross-origin 
  requests. An origin can be a domain, a subdomain, or even 'null' for local file schemes.
  """
  allowOrigins: [String!]
  """
  Indicates whether requests from private network addresses are allowed in cross-origin 
  requests. Private network addresses typically include IP addresses reserved for internal 
  networks.
  """
  allowPrivateNetwork: Boolean
  """
  A list of headers that the server exposes to the browser in cross-origin responses. 
  Exposing certain headers allows the client-side code to access them in the response.
  """
  exposeHeaders: [String!]
  """
  The maximum time (in seconds) that the client should cache preflight OPTIONS requests 
  in order to avoid sending excessive requests to the server.
  """
  maxAge: Int
  """
  A list of header names that indicate the values of which might cause the server's 
  response to vary, potentially affecting caching.
  """
  vary: [String!]
}

input Headers {
  """
  `cacheControl` sends `Cache-Control` headers in responses when activated. The `max-age` 
  value is the least of the values received from upstream services. @default `false`.
  """
  cacheControl: Boolean
  """
  `cors` allows Cross-Origin Resource Sharing (CORS) for a server.
  """
  cors: Cors
  """
  `headers` are key-value pairs included in every server response. Useful for setting 
  headers like `Access-Control-Allow-Origin` for cross-origin requests or additional 
  headers for downstream services.
  """
  custom: [KeyValue]
  """
  `experimental` allows the use of `X-*` experimental headers in the response. @default 
  `[]`.
  """
  experimental: [String!]
  """
  `setCookies` when enabled stores `set-cookie` headers and all the response will be 
  sent with the headers.
  """
  setCookies: Boolean
}

input ScriptOptions {
  timeout: Int
}

input Apollo {
  """
  Setting `apiKey` for Apollo.
  """
  apiKey: String!
  """
  Setting `graphRef` for Apollo in the format <graphId>@<variant>.
  """
  graphRef: String!
  """
  Setting `platform` for Apollo.
  """
  platform: String
  """
  Setting `userVersion` for Apollo.
  """
  userVersion: String
  """
  Setting `version` for Apollo.
  """
  version: String
}

"""
Output the opentelemetry data to otlp collector
"""
input OtlpExporter {
  headers: [KeyValue]
  url: String!
}

"""
Output the telemetry metrics data to prometheus server
"""
input PrometheusExporter {
  format: PrometheusFormat
  path: String!
}

"""
Output the opentelemetry data to the stdout. Mostly used for debug purposes
"""
input StdoutExporter {
  """
  Output to stdout in pretty human-readable format
  """
  pretty: Boolean!
}

input TelemetryExporter {
  stdout: StdoutExporter
  otlp: OtlpExporter
  prometheus: PrometheusExporter
  apollo: Apollo
}

input Batch {
  delay: Int!
  headers: [String!]
  maxSize: Int
}

input Proxy {
  url: String!
}

"""
The @graphQL operator allows to specify GraphQL API server request to fetch data 
from.
"""
input GraphQL {
  """
  Named arguments for the requested field. More info [here](https://tailcall.run/docs/guides/operators/#args)
  """
  args: [KeyValue]
  """
  This refers to the base URL of the API. If not specified, the default base URL is 
  the one specified in the `@upstream` operator.
  """
  baseURL: String
  """
  If the upstream GraphQL server supports request batching, you can specify the 'batch' 
  argument to batch several requests into a single batch request.Make sure you have 
  also specified batch settings to the `@upstream` and to the `@graphQL` operator.
  """
  batch: Boolean!
  """
  The headers parameter allows you to customize the headers of the GraphQL request 
  made by the `@graphQL` operator. It is used by specifying a key-value map of header 
  names and their values.
  """
  headers: [KeyValue]
  """
  Specifies the root field on the upstream to request data from. This maps a field 
  in your schema to a field in the upstream schema. When a query is received for this 
  field, Tailcall requests data from the corresponding upstream field.
  """
  name: String!
}

"""
The @grpc operator indicates that a field or node is backed by a gRPC API.For instance, 
if you add the @grpc operator to the `users` field of the Query type with a service 
argument of `NewsService` and method argument of `GetAllNews`, it signifies that 
the `users` field is backed by a gRPC API. The `service` argument specifies the name 
of the gRPC service. The `method` argument specifies the name of the gRPC method. 
In this scenario, the GraphQL server will make a gRPC request to the gRPC endpoint 
specified when the `users` field is queried.
"""
input Grpc {
  """
  This refers to the base URL of the API. If not specified, the default base URL is 
  the one specified in the `@upstream` operator.
  """
  baseURL: String
  """
  The `batchKey` dictates the path Tailcall will follow to group the returned items 
  from the batch request. For more details please refer out [n + 1 guide](https://tailcall.run/docs/guides/n+1#solving-using-batching).
  """
  batchKey: [String!]
  """
  This refers to the arguments of your gRPC call. You can pass it as a static object 
  or use Mustache template for dynamic parameters. These parameters will be added in 
  the body in `protobuf` format.
  """
  body: JSON
  """
  The `headers` parameter allows you to customize the headers of the HTTP request made 
  by the `@grpc` operator. It is used by specifying a key-value map of header names 
  and their values. Note: content-type is automatically set to application/grpc
  """
  headers: [KeyValue]
  """
  This refers to the gRPC method you're going to call. For instance `GetAllNews`.
  """
  method: String!
}

"""
The @http operator indicates that a field or node is backed by a REST API.For instance, 
if you add the @http operator to the `users` field of the Query type with a path 
argument of `"/users"`, it signifies that the `users` field is backed by a REST API. 
The path argument specifies the path of the REST API. In this scenario, the GraphQL 
server will make a GET request to the API endpoint specified when the `users` field 
is queried.
"""
input Http {
  """
  This refers to the base URL of the API. If not specified, the default base URL is 
  the one specified in the `@upstream` operator.
  """
  baseURL: String
  """
  The `batchKey` dictates the path Tailcall will follow to group the returned items 
  from the batch request. For more details please refer out [n + 1 guide](https://tailcall.run/docs/guides/n+1#solving-using-batching).
  """
  batchKey: [String!]
  """
  The body of the API call. It's used for methods like POST or PUT that send data to 
  the server. You can pass it as a static object or use a Mustache template to substitute 
  variables from the GraphQL variables.
  """
  body: String
  """
  The `encoding` parameter specifies the encoding of the request body. It can be `ApplicationJson` 
  or `ApplicationXWwwFormUrlEncoded`. @default `ApplicationJson`.
  """
  encoding: Encoding
  """
  The `headers` parameter allows you to customize the headers of the HTTP request made 
  by the `@http` operator. It is used by specifying a key-value map of header names 
  and their values.
  """
  headers: [KeyValue]
  """
  Schema of the input of the API call. It is automatically inferred in most cases.
  """
  input: Schema
  """
  This refers to the HTTP method of the API call. Commonly used methods include `GET`, 
  `POST`, `PUT`, `DELETE` etc. @default `GET`.
  """
  method: Method
  """
  onRequest field in @http directive gives the ability to specify the request interception 
  handler.
  """
  onRequest: String
  """
  Schema of the output of the API call. It is automatically inferred in most cases.
  """
  output: Schema
  """
  This refers to the API endpoint you're going to call. For instance `https://jsonplaceholder.typicode.com/users`.For 
  dynamic segments in your API endpoint, use Mustache templates for variable substitution. 
  For instance, to fetch a specific user, use `/users/{{args.id}}`.
  """
  path: String!
  """
  This represents the query parameters of your API call. You can pass it as a static 
  object or use Mustache template for dynamic parameters. These parameters will be 
  added to the URL. NOTE: Query parameter order is critical for batching in Tailcall. 
  The first parameter referencing a field in the current value using mustache syntax 
  is automatically selected as the batching parameter.
  """
  query: [KeyValue]
}

"""
The `@expr` operators allows you to specify an expression that can evaluate to a 
value. The expression can be a static value or built form a Mustache template. schema.
"""
input Expr {
  body: JSON
}

input JS {
  name: String!
}

input Modify {
  name: String
  omit: Boolean
}

"""
The @cache operator enables caching for the query, field or type it is applied to.
"""
input Cache {
  """
  Specifies the duration, in milliseconds, of how long the value has to be stored in 
  the cache.
  """
  maxAge: Int!
}

"""
The @telemetry directive facilitates seamless integration with OpenTelemetry, enhancing 
the observability of your GraphQL services powered by Tailcall.  By leveraging this 
directive, developers gain access to valuable insights into the performance and behavior 
of their applications.
"""
input Telemetry {
  export: TelemetryExporter
  """
  The list of headers that will be sent as additional attributes to telemetry exporters 
  Be careful about **leaking sensitive information** from requests when enabling the 
  headers that may contain sensitive data
  """
  requestHeaders: [String!]
}

enum Encoding {
  ApplicationJson
  ApplicationXWwwFormUrlencoded
}

enum Method {
  GET
  POST
  PUT
  PATCH
  DELETE
  HEAD
  OPTIONS
  CONNECT
  TRACE
}

enum LinkType {
  Config
  Protobuf
  Script
  Cert
  Key
  Operation
  Htpasswd
  Jwks
  Grpc
}

enum HttpVersion {
  HTTP1
  HTTP2
}

"""
Output format for prometheus data
"""
enum PrometheusFormat {
  text
  protobuf
}