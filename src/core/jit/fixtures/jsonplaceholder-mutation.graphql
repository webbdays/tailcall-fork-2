schema
  @server(port: 8000, headers: {cors: {allowOrigins: ["*"], allowHeaders: ["*"], allowMethods: [POST, GET, OPTIONS]}})
  @upstream(baseURL: "http://jsonplaceholder.typicode.com", httpCache: 42, batch: {delay: 100}) {
  query: Query
  mutation: Mutation
}

type Query {
  posts: [Post] @http(path: "/posts")
  users: [User] @http(path: "/users")
  user(id: ID!): User @http(path: "/users/{{.args.id}}")
  post(id: ID!): Post @http(path: "/posts/{{.args.id}}")
  getUserIdOrEmail(id: ID!): UserIdOrEmail @http(path: "/users/{{.args.id}}")
}

type UserId {
  id: ID!
}

type UserEmail {
  email: String!
}

union UserIdOrEmail = UserId | UserEmail

type Mutation {
  createUser(user: InputUser!): User @http(method: POST, path: "/users", body: "{{args.user}}")
  createPost(post: InputPost!): Post @http(method: POST, path: "/posts", body: "{{args.post}}")
}

input InputPost {
  id: ID = 101
  userId: ID!
  title: String!
  body: String!
}

input InputUser {
  id: ID!
  name: String!
  username: String!
  email: String!
  phone: String
  website: String
}

type User {
  id: ID!
  name: String!
  username: String!
  email: String!
  phone: String
  website: String
  address: Address
  todo: Todo @http(path: "/todos/{{.value.id}}")
}

type Todo {
  id: ID!
  userId: ID!
  title: String
  completed: Boolean
}

type Address {
  street: String
  suite: String
  city: String
  zipcode: String
}

type Post {
  id: ID!
  userId: ID!
  title: String!
  body: String!
  user: User @call(steps: [{query: "user", args: {id: "{{.value.userId}}"}}])
}
