schema
  @server(port: 8000, hostname: "0.0.0.0")
  @upstream(baseURL: "http://jsonplaceholder.typicode.com", httpCache: 42)
  @link(type: Operation, src: "operations/routes.graphql")
  @link(id: "news", src: "../tailcall-fixtures/fixtures/protobuf/news.proto", type: Protobuf)
  @telemetry(
    export: {
      otlp: {
        url: "https://api.honeycomb.io:443"
        # gather api key from https://ui.honeycomb.io and set it as env when running tailcall
        headers: [
          {key: "x-honeycomb-team", value: "{{.env.HONEYCOMB_API_KEY}}"}
          {key: "x-honeycomb-dataset", value: "tailcall"}
        ]
      }
    }
    requestHeaders: ["user-id"]
  ) {
  query: Query
}

type Query {
  posts: [Post] @http(path: "/posts") @cache(maxAge: 3000)
  user(id: Int!): User @http(path: "/users/{{.args.id}}")
  users: [User] @http(path: "/users")
  news: NewsData! @grpc(baseURL: "http://localhost:50051", method: "news.NewsService.GetAllNews")
}

type User {
  id: Int!
  name: String!
  username: String!
  email: String!
  phone: String
  website: String
}

type Post {
  id: Int!
  userId: Int!
  title: String!
  body: String!
  user: User @http(path: "/users/{{.value.userId}}")
}

type News {
  id: Int
  title: String
  body: String
  postImage: String
  status: Status
}

enum Status {
  PUBLISHED
  DRAFT
  DELETED
}

type NewsData {
  news: [News]!
}
